{"ast":null,"code":"var _jsxFileName = \"/Users/nicole/Desktop/dust/src/Components/YMap.js\";\nimport React from \"react\";\nimport { YMaps, Map, Clusterer, Placemark } from \"react-yandex-maps\";\nimport { points, gradientColors } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapState = {\n  center: [55.751574, 80.573856],\n  zoom: 3,\n  behaviors: [\"default\", \"scrollZoom\"]\n};\n\nconst getPointData = index => {\n  return {\n    balloonContentBody: \"placemark <strong>balloon \" + index + \"</strong>\",\n    clusterCaption: \"placemark <strong>\" + index + \"</strong>\"\n  };\n};\n\nconst getPointOptions = () => {\n  return {\n    preset: \"islands#violetIcon\",\n    iconColor: getRandomColor()\n  };\n};\n\nfunction getRandomColor() {\n  return gradientColors[Math.floor(Math.random() * gradientColors.length)];\n}\n\nclass ClustererCreate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeSomething = () => {\n      this.setState({\n        some: 1\n      });\n    };\n\n    this.changeSomething = this.changeSomething.bind(this);\n    this.state = {\n      some: 0\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(YMaps, {\n        children: /*#__PURE__*/_jsxDEV(Map, {\n          state: mapState,\n          width: \"100%\",\n          height: \"600px\",\n          modules: [\"package.full\"],\n          children: /*#__PURE__*/_jsxDEV(Clusterer, {\n            options: {\n              clusterIconLayout: \"default#pieChart\",\n              clusterIconPieChartRadius: 25,\n              clusterIconPieChartCoreRadius: 10,\n              clusterIconPieChartStrokeWidth: 1,\n              clusterDisableClickZoom: true,\n              clusterHideIconOnBalloonOpen: false,\n              geoObjectHideIconOnBalloonOpen: false\n            },\n            children: points.map((points, idx) => /*#__PURE__*/_jsxDEV(Placemark, {\n              geometry: points,\n              properties: getPointData(idx),\n              options: getPointOptions()\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.changeSomething,\n        style: {\n          marginTop: 40,\n          width: 200,\n          height: 60\n        },\n        children: \"Click to rerender\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ClustererCreate;","map":{"version":3,"sources":["/Users/nicole/Desktop/dust/src/Components/YMap.js"],"names":["React","YMaps","Map","Clusterer","Placemark","points","gradientColors","mapState","center","zoom","behaviors","getPointData","index","balloonContentBody","clusterCaption","getPointOptions","preset","iconColor","getRandomColor","Math","floor","random","length","ClustererCreate","Component","constructor","props","changeSomething","setState","some","bind","state","render","clusterIconLayout","clusterIconPieChartRadius","clusterIconPieChartCoreRadius","clusterIconPieChartStrokeWidth","clusterDisableClickZoom","clusterHideIconOnBalloonOpen","geoObjectHideIconOnBalloonOpen","map","idx","marginTop","width","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,SAArB,EAAgCC,SAAhC,QAAiD,mBAAjD;AAEA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,QAAvC;;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,CADO;AAEfC,EAAAA,IAAI,EAAE,CAFS;AAGfC,EAAAA,SAAS,EAAE,CAAC,SAAD,EAAY,YAAZ;AAHI,CAAjB;;AAMA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,SAAO;AACLC,IAAAA,kBAAkB,EAAE,+BAA+BD,KAA/B,GAAuC,WADtD;AAELE,IAAAA,cAAc,EAAE,uBAAuBF,KAAvB,GAA+B;AAF1C,GAAP;AAID,CALD;;AAOA,MAAMG,eAAe,GAAG,MAAM;AAC5B,SAAO;AACLC,IAAAA,MAAM,EAAE,oBADH;AAELC,IAAAA,SAAS,EAAEC,cAAc;AAFpB,GAAP;AAID,CALD;;AAOA,SAASA,cAAT,GAA0B;AACxB,SAAOZ,cAAc,CAACa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBf,cAAc,CAACgB,MAA1C,CAAD,CAArB;AACD;;AAED,MAAMC,eAAN,SAA8BvB,KAAK,CAACwB,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,eARmB,GAQD,MAAM;AACtB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,KAVkB;;AAEjB,SAAKF,eAAL,GAAuB,KAAKA,eAAL,CAAqBG,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,KAAL,GAAa;AACXF,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAMDG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,KAAD;AAAA,+BACE,QAAC,GAAD;AACE,UAAA,KAAK,EAAEzB,QADT;AAEE,UAAA,KAAK,EAAC,MAFR;AAGE,UAAA,MAAM,EAAC,OAHT;AAIE,UAAA,OAAO,EAAE,CAAC,cAAD,CAJX;AAAA,iCAME,QAAC,SAAD;AACE,YAAA,OAAO,EAAE;AACP0B,cAAAA,iBAAiB,EAAE,kBADZ;AAEPC,cAAAA,yBAAyB,EAAE,EAFpB;AAGPC,cAAAA,6BAA6B,EAAE,EAHxB;AAIPC,cAAAA,8BAA8B,EAAE,CAJzB;AAKPC,cAAAA,uBAAuB,EAAE,IALlB;AAMPC,cAAAA,4BAA4B,EAAE,KANvB;AAOPC,cAAAA,8BAA8B,EAAE;AAPzB,aADX;AAAA,sBAWGlC,MAAM,CAACmC,GAAP,CAAW,CAACnC,MAAD,EAASoC,GAAT,kBACV,QAAC,SAAD;AAEE,cAAA,QAAQ,EAAEpC,MAFZ;AAGE,cAAA,UAAU,EAAEM,YAAY,CAAC8B,GAAD,CAH1B;AAIE,cAAA,OAAO,EAAE1B,eAAe;AAJ1B,eACO0B,GADP;AAAA;AAAA;AAAA;AAAA,oBADD;AAXH;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eA8BE;AACE,QAAA,OAAO,EAAE,KAAKd,eADhB;AAEE,QAAA,KAAK,EAAE;AAAEe,UAAAA,SAAS,EAAE,EAAb;AAAiBC,UAAAA,KAAK,EAAE,GAAxB;AAA6BC,UAAAA,MAAM,EAAE;AAArC,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuCD;;AArD2C;;AAwD9C,eAAerB,eAAf","sourcesContent":["import React from \"react\";\nimport { YMaps, Map, Clusterer, Placemark } from \"react-yandex-maps\";\n\nimport { points, gradientColors } from \"./data\";\n\nconst mapState = {\n  center: [55.751574, 80.573856],\n  zoom: 3,\n  behaviors: [\"default\", \"scrollZoom\"]\n};\n\nconst getPointData = index => {\n  return {\n    balloonContentBody: \"placemark <strong>balloon \" + index + \"</strong>\",\n    clusterCaption: \"placemark <strong>\" + index + \"</strong>\"\n  };\n};\n\nconst getPointOptions = () => {\n  return {\n    preset: \"islands#violetIcon\",\n    iconColor: getRandomColor()\n  };\n};\n\nfunction getRandomColor() {\n  return gradientColors[Math.floor(Math.random() * gradientColors.length)];\n}\n\nclass ClustererCreate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeSomething = this.changeSomething.bind(this);\n    this.state = {\n      some: 0\n    };\n  }\n\n  changeSomething = () => {\n    this.setState({ some: 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <YMaps>\n          <Map\n            state={mapState}\n            width=\"100%\"\n            height=\"600px\"\n            modules={[\"package.full\"]}\n          >\n            <Clusterer\n              options={{\n                clusterIconLayout: \"default#pieChart\",\n                clusterIconPieChartRadius: 25,\n                clusterIconPieChartCoreRadius: 10,\n                clusterIconPieChartStrokeWidth: 1,\n                clusterDisableClickZoom: true,\n                clusterHideIconOnBalloonOpen: false,\n                geoObjectHideIconOnBalloonOpen: false\n              }}\n            >\n              {points.map((points, idx) => (\n                <Placemark\n                  key={idx}\n                  geometry={points}\n                  properties={getPointData(idx)}\n                  options={getPointOptions()}\n                />\n              ))}\n            </Clusterer>\n          </Map>\n        </YMaps>\n        <button\n          onClick={this.changeSomething}\n          style={{ marginTop: 40, width: 200, height: 60 }}\n        >\n          Click to rerender\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ClustererCreate;\n"]},"metadata":{},"sourceType":"module"}